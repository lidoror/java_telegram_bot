name: JavaBotBuild

trigger:
    branches:
        include:
            - master
    paths:
        include:
            - src/main/java/com/oranim/telegrambot/*
            - infra/AzureDevops/BotBuild.yaml
            - infra/helm/TelegramBotJava/*
            - infra/Dockerfiles/BotBuild.Dockerfile
            - pom.xml

pool:
    Azure Pipelines
variables:

    REGISTRY_CONNECTION: 'aws_ecr'
    IMAGE_REPOSITORY: telegram_bot_java




stages:
    - stage: BuildPublisArtifacts
      jobs:
          - job: Build
            steps:
                
            - task: Maven@4
              displayName: BuildingJar
              inputs:
                mavenPomFile: 'pom.xml'
                goals: 'clean compile assembly:single'
                publishJUnitResults: true
                testResultsFiles: '**/surefire-reports/TEST-*.xml'
                javaHomeOption: 'JDKVersion'
                jdkVersionOption: '1.17'
                mavenVersionOption: 'Default'
                mavenAuthenticateFeed: false
                effectivePomSkip: false
                sonarQubeRunAnalysis: false
                

            - task: CopyFiles@2
              displayName: CopyJar
              inputs:
                SourceFolder: 'target'
                Contents: '**/*.jar'
                TargetFolder: '$(build.artifactstagingdirectory)'

            - task: PublishBuildArtifacts@1
              displayName: PublishJar
              inputs:
                PathtoPublish: '$(build.artifactstagingdirectory)'
                ArtifactName: 'JavaTelegramBot'
                publishLocation: 'Container'
            
            - task: Bash@3
              displayName: CreatingTag
              inputs:
                targetType: 'inline'
                script: |
                    GIT_COMMIT=$(git rev-parse --short HEAD)
                    echo "GIT_COMMIT: ${GIT_COMMIT}"
                    echo "##vso[task.setvariable variable=GIT_COMMIT]${GIT_COMMIT}"


            - script: docker build -f infra/Dockerfiles/BotBuild.Dockerfile -t $(IMAGE_REPOSITORY):$(GIT_COMMIT) .
              displayName: BuldingDockerImage 

            - task: ECRPushImage@1
              inputs:
                awsCredentials: $(REGISTRY_CONNECTION)
                regionName: 'us-east-1'
                imageSource: 'imagename'
                sourceImageName: '$(IMAGE_REPOSITORY)'
                sourceImageTag: '$(GIT_COMMIT)'
                repositoryName: $(IMAGE_REPOSITORY)
                pushTag: '$(GIT_COMMIT)'




          


        


